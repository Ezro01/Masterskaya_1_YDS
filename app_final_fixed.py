import pandas as pd
import numpy as np
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
import uvicorn
import tempfile
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from contextlib import asynccontextmanager
import warnings

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings('ignore')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è
predictor = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    global predictor
    print("üöÄ –ó–∞–ø—É—Å–∫ Heart Disease Prediction...")
    predictor = HeartDiseasePredictor()
    predictor.train_model()
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
    yield
    # Shutdown
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Heart Disease Prediction", version="1.0", lifespan=lifespan)

class HeartDiseasePredictor:
    def __init__(self):
        self.model = None
        self.feature_names = None
        self.threshold = 0.454  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∏–∑ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
        
    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π"""
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_train = pd.read_csv('heart_train.csv')
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_train)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫–∞–∫ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
        columns_to_drop = ['Unnamed: 0', 'id', 'Heart Attack Risk (Binary)', 'Smoking', 'Blood sugar', 'CK-MB', 'Troponin']
        df_clean = df_train.drop(columns=columns_to_drop, errors='ignore')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤—Å–µ –∫—Ä–æ–º–µ —á–∏—Å–ª–æ–≤—ã—Ö)
        categorical_features = ['Diabetes', 'Family History', 'Obesity', 'Alcohol Consumption', 
                              'Diet', 'Previous Heart Problems', 'Medication Use', 'Stress Level',
                              'Physical Activity Days Per Week', 'Sleep Hours Per Day', 'Gender']
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
        numerical_features = [col for col in df_clean.columns if col not in categorical_features]
        
        print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(categorical_features)}")
        print(f"üìä –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(numerical_features)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        preprocessor = ColumnTransformer(
            transformers=[
                ('num', 'passthrough', numerical_features),
                ('cat', OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore', min_frequency=1), categorical_features)
            ])
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        self.model = Pipeline([
            ('preprocessor', preprocessor),
            ('classifier', RandomForestClassifier(
                n_estimators=2000,
                max_depth=10,
                class_weight='balanced',
                random_state=42
            ))
        ])
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        X = df_clean
        y = df_train['Heart Attack Risk (Binary)']
        
        self.model.fit(X, y)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.feature_names = df_clean.columns.tolist()
        self.categorical_features = categorical_features
        self.numerical_features = numerical_features
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —Å {len(self.feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
        print(f"üéØ –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {self.threshold}")
        
    def predict_single(self, data_dict):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame([data_dict])
            
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            columns_to_drop = ['Unnamed: 0', 'id', 'Heart Attack Risk (Binary)', 'Smoking', 'Blood sugar', 'CK-MB', 'Troponin']
            df_clean = df.drop(columns=columns_to_drop, errors='ignore')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
            for col in self.categorical_features:
                if col in df_clean.columns:
                    if col == 'Gender':
                        # Gender –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                        df_clean[col] = df_clean[col].astype(str)
                    elif col in ['Physical Activity Days Per Week', 'Sleep Hours Per Day']:
                        # –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏
                        df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0).astype(int)
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏
                        df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0).astype(int)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ float
            for col in self.numerical_features:
                if col in df_clean.columns:
                    df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            proba = self.model.predict_proba(df_clean)[0]
            risk_probability = proba[1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥
            prediction = 1 if risk_probability >= self.threshold else 0
            
            return {
                'prediction': int(prediction),
                'probability': float(risk_probability),
                'threshold': self.threshold
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return {'prediction': 0, 'probability': 0.0, 'threshold': self.threshold}
    
    def predict_batch(self, df):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            columns_to_drop = ['Unnamed: 0', 'id', 'Heart Attack Risk (Binary)', 'Smoking', 'Blood sugar', 'CK-MB', 'Troponin']
            df_clean = df.drop(columns=columns_to_drop, errors='ignore')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
            for col in self.categorical_features:
                if col in df_clean.columns:
                    if col == 'Gender':
                        # Gender –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                        df_clean[col] = df_clean[col].astype(str)
                    elif col in ['Physical Activity Days Per Week', 'Sleep Hours Per Day']:
                        # –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏
                        df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0).astype(int)
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏
                        df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0).astype(int)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ float
            for col in self.numerical_features:
                if col in df_clean.columns:
                    df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            probas = self.model.predict_proba(df_clean)
            risk_probabilities = probas[:, 1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥
            predictions = (risk_probabilities >= self.threshold).astype(int)
            
            return predictions.tolist()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return [0] * len(df)

@app.get("/", response_class=HTMLResponse)
async def main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üíì Heart Disease Prediction</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            
            .header {
                background: linear-gradient(135deg, #ff6b6b, #ee5a24);
                color: white;
                padding: 30px;
                text-align: center;
            }
            
            .header h1 {
                font-size: 2.5em;
                margin-bottom: 10px;
            }
            
            .header p {
                font-size: 1.2em;
                opacity: 0.9;
            }
            
            .nav {
                display: flex;
                background: #f8f9fa;
                border-bottom: 1px solid #dee2e6;
            }
            
            .nav button {
                flex: 1;
                padding: 15px;
                border: none;
                background: none;
                cursor: pointer;
                font-size: 1.1em;
                transition: all 0.3s ease;
            }
            
            .nav button.active {
                background: #007bff;
                color: white;
            }
            
            .nav button:hover {
                background: #0056b3;
                color: white;
            }
            
            .content {
                padding: 30px;
                display: none;
            }
            
            .content.active {
                display: block;
            }
            
            .form-group {
                margin-bottom: 20px;
            }
            
            .form-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #333;
            }
            
            .form-group input, .form-group select {
                width: 100%;
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 16px;
                transition: border-color 0.3s ease;
            }
            
            .form-group input:focus, .form-group select:focus {
                outline: none;
                border-color: #007bff;
            }
            
            .slider-container {
                display: flex;
                align-items: center;
                gap: 15px;
            }
            
            .slider {
                flex: 1;
                height: 6px;
                border-radius: 3px;
                background: #ddd;
                outline: none;
                -webkit-appearance: none;
            }
            
            .slider::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 20px;
                height: 20px;
                border-radius: 50%;
                background: #007bff;
                cursor: pointer;
            }
            
            .slider::-moz-range-thumb {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                background: #007bff;
                cursor: pointer;
                border: none;
            }
            
            .value-display {
                min-width: 60px;
                text-align: center;
                font-weight: bold;
                color: #007bff;
            }
            
            .btn {
                background: linear-gradient(135deg, #007bff, #0056b3);
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 8px;
                font-size: 1.1em;
                cursor: pointer;
                transition: all 0.3s ease;
                width: 100%;
                margin-top: 20px;
            }
            
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(0,123,255,0.3);
            }
            
            .result {
                margin-top: 20px;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                font-size: 1.2em;
                font-weight: bold;
            }
            
            .result.low-risk {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            
            .result.high-risk {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            
            .file-upload {
                border: 2px dashed #ddd;
                border-radius: 10px;
                padding: 40px;
                text-align: center;
                margin-bottom: 20px;
                transition: border-color 0.3s ease;
            }
            
            .file-upload:hover {
                border-color: #007bff;
            }
            
            .file-upload input {
                display: none;
            }
            
            .file-upload label {
                cursor: pointer;
                color: #007bff;
                font-weight: bold;
            }
            
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }
            
            .info-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid #007bff;
            }
            
            .info-card h3 {
                color: #007bff;
                margin-bottom: 10px;
            }
            
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #007bff;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 0 auto 10px;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üíì Heart Disease Prediction</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞</p>
            </div>
            
            <div class="nav">
                <button onclick="showTab('single', this)" class="active">üë§ –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</button>
                <button onclick="showTab('batch', this)">üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</button>
                <button onclick="showTab('info', this)">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</button>
            </div>
            
            <div id="single" class="content active">
                <h2>–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</h2>
                <form id="predictionForm">
                    <div class="form-group">
                        <label>–í–æ–∑—Ä–∞—Å—Ç (Age):</label>
                        <div class="slider-container">
                            <input type="range" id="Age" name="Age" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Age-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω (Cholesterol):</label>
                        <div class="slider-container">
                            <input type="range" id="Cholesterol" name="Cholesterol" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Cholesterol-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–ß–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (Heart rate):</label>
                        <div class="slider-container">
                            <input type="range" id="Heart rate" name="Heart rate" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Heart rate-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–î–∏–∞–±–µ—Ç (Diabetes):</label>
                        <select id="Diabetes" name="Diabetes">
                            <option value="0">–ù–µ—Ç</option>
                            <option value="1">–î–∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (Family History):</label>
                        <select id="Family History" name="Family History">
                            <option value="0">–ù–µ—Ç</option>
                            <option value="1">–î–∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–û–∂–∏—Ä–µ–Ω–∏–µ (Obesity):</label>
                        <select id="Obesity" name="Obesity">
                            <option value="0">–ù–µ—Ç</option>
                            <option value="1">–î–∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è (Alcohol Consumption):</label>
                        <select id="Alcohol Consumption" name="Alcohol Consumption">
                            <option value="0">–ù–µ—Ç</option>
                            <option value="1">–£–º–µ—Ä–µ–Ω–Ω–æ–µ</option>
                            <option value="2">–í—ã—Å–æ–∫–æ–µ</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–ß–∞—Å—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é (Exercise Hours Per Week):</label>
                        <div class="slider-container">
                            <input type="range" id="Exercise Hours Per Week" name="Exercise Hours Per Week" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Exercise Hours Per Week-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–î–∏–µ—Ç–∞ (Diet):</label>
                        <select id="Diet" name="Diet">
                            <option value="0">–ü–ª–æ—Ö–∞—è</option>
                            <option value="1">–°—Ä–µ–¥–Ω—è—è</option>
                            <option value="2">–•–æ—Ä–æ—à–∞—è</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–¥—Ü–µ–º (Previous Heart Problems):</label>
                        <select id="Previous Heart Problems" name="Previous Heart Problems">
                            <option value="0">–ù–µ—Ç</option>
                            <option value="1">–î–∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤ (Medication Use):</label>
                        <select id="Medication Use" name="Medication Use">
                            <option value="0">–ù–µ—Ç</option>
                            <option value="1">–î–∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (Stress Level):</label>
                        <select id="Stress Level" name="Stress Level">
                            <option value="0">–ù–∏–∑–∫–∏–π</option>
                            <option value="1">–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="2">–í—ã—Å–æ–∫–∏–π</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–°–∏–¥—è—á–∏–µ —á–∞—Å—ã –≤ –¥–µ–Ω—å (Sedentary Hours Per Day):</label>
                        <div class="slider-container">
                            <input type="range" id="Sedentary Hours Per Day" name="Sedentary Hours Per Day" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Sedentary Hours Per Day-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–î–æ—Ö–æ–¥ (Income):</label>
                        <div class="slider-container">
                            <input type="range" id="Income" name="Income" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Income-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (BMI):</label>
                        <div class="slider-container">
                            <input type="range" id="BMI" name="BMI" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="BMI-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã (Triglycerides):</label>
                        <div class="slider-container">
                            <input type="range" id="Triglycerides" name="Triglycerides" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Triglycerides-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é (Physical Activity Days Per Week):</label>
                        <select id="Physical Activity Days Per Week" name="Physical Activity Days Per Week">
                            <option value="0">0 –¥–Ω–µ–π</option>
                            <option value="1">1 –¥–µ–Ω—å</option>
                            <option value="2">2 –¥–Ω—è</option>
                            <option value="3">3 –¥–Ω—è</option>
                            <option value="4">4 –¥–Ω—è</option>
                            <option value="5">5 –¥–Ω–µ–π</option>
                            <option value="6">6 –¥–Ω–µ–π</option>
                            <option value="7">7 –¥–Ω–µ–π</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–°–æ–Ω —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å (Sleep Hours Per Day):</label>
                        <select id="Sleep Hours Per Day" name="Sleep Hours Per Day">
                            <option value="4">4 —á–∞—Å–∞</option>
                            <option value="5">5 —á–∞—Å–æ–≤</option>
                            <option value="6">6 —á–∞—Å–æ–≤</option>
                            <option value="7">7 —á–∞—Å–æ–≤</option>
                            <option value="8">8 —á–∞—Å–æ–≤</option>
                            <option value="9">9 —á–∞—Å–æ–≤</option>
                            <option value="10">10 —á–∞—Å–æ–≤</option>
                            <option value="11">11 —á–∞—Å–æ–≤</option>
                            <option value="12">12 —á–∞—Å–æ–≤</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–ü–æ–ª (Gender):</label>
                        <select id="Gender" name="Gender">
                            <option value="Female">–ñ–µ–Ω—Å–∫–∏–π</option>
                            <option value="Male">–ú—É–∂—Å–∫–æ–π</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (Systolic blood pressure):</label>
                        <div class="slider-container">
                            <input type="range" id="Systolic blood pressure" name="Systolic blood pressure" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Systolic blood pressure-value">0.50</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (Diastolic blood pressure):</label>
                        <div class="slider-container">
                            <input type="range" id="Diastolic blood pressure" name="Diastolic blood pressure" min="0" max="1" step="0.01" value="0.5" class="slider">
                            <span class="value-display" id="Diastolic blood pressure-value">0.50</span>
                        </div>
                    </div>
                    
                    <button type="button" onclick="submitForm()" class="btn">–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</button>
                </form>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
                
                <div id="result" class="result" style="display: none;"></div>
            </div>
            
            <div id="batch" class="content">
                <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</h2>
                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</p>
                
                <div class="file-upload">
                    <input type="file" id="fileInput" accept=".csv">
                    <label for="fileInput">üìÅ –í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞</label>
                </div>
                
                <button onclick="uploadFile()" class="btn">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</button>
                
                <div class="loading" id="batchLoading">
                    <div class="spinner"></div>
                    <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...</p>
                </div>
                
                <div id="batchResult"></div>
            </div>
            
            <div id="info" class="content">
                <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</h2>
                
                <div class="info-grid">
                    <div class="info-card">
                        <h3>üéØ –ê–ª–≥–æ—Ä–∏—Ç–º</h3>
                        <p>Random Forest Classifier</p>
                        <p>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: n_estimators=2000, max_depth=10</p>
                    </div>
                    
                    <div class="info-card">
                        <h3>üìä –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
                        <p>0.454 (–∏–∑ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π)</p>
                        <p>–ü—Ä–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ ‚â• 0.454 - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</p>
                    </div>
                    
                    <div class="info-card">
                        <h3>üìã –ü—Ä–∏–∑–Ω–∞–∫–∏</h3>
                        <p>–í—Å–µ–≥–æ: 21 –ø—Ä–∏–∑–Ω–∞–∫</p>
                        <p>–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ: 11</p>
                        <p>–ß–∏—Å–ª–æ–≤—ã–µ: 10 (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)</p>
                    </div>
                    
                    <div class="info-card">
                        <h3>‚ö†Ô∏è –í–∞–∂–Ω–æ</h3>
                        <p>–≠—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML</p>
                        <p>–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É</p>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            // –ü–æ–∫–∞–∑ –≤–∫–ª–∞–¥–æ–∫
            function showTab(tabName, element) {
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                document.querySelectorAll('.content').forEach(content => {
                    content.classList.remove('active');
                });
                document.querySelectorAll('.nav button').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                document.getElementById(tabName).classList.add('active');
                element.classList.add('active');
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–∞–π–¥–µ—Ä–æ–≤
            document.querySelectorAll('.slider').forEach(slider => {
                slider.addEventListener('input', function() {
                    const value = parseFloat(this.value).toFixed(2);
                    document.getElementById(this.id + '-value').textContent = value;
                });
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
            async function submitForm() {
                const form = document.getElementById('predictionForm');
                const formData = new FormData(form);
                const data = {};
                
                for (let [key, value] of formData.entries()) {
                    data[key] = parseFloat(value) || value;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                document.getElementById('loading').style.display = 'block';
                document.getElementById('result').style.display = 'none';
                
                try {
                    const response = await fetch('/api/predict/single', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    document.getElementById('loading').style.display = 'none';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const resultDiv = document.getElementById('result');
                    resultDiv.style.display = 'block';
                    
                    if (result.prediction === 1) {
                        resultDiv.className = 'result high-risk';
                        resultDiv.innerHTML = `
                            <h3>‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö</h3>
                            <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(result.probability * 100).toFixed(1)}%</p>
                            <p>–ü–æ—Ä–æ–≥: ${(result.threshold * 100).toFixed(1)}%</p>
                        `;
                    } else {
                        resultDiv.className = 'result low-risk';
                        resultDiv.innerHTML = `
                            <h3>‚úÖ –ù–ò–ó–ö–ò–ô –†–ò–°–ö</h3>
                            <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(result.probability * 100).toFixed(1)}%</p>
                            <p>–ü–æ—Ä–æ–≥: ${(result.threshold * 100).toFixed(1)}%</p>
                        `;
                    }
                    
                } catch (error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: ' + error.message);
                }
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            async function uploadFile() {
                const fileInput = document.getElementById('fileInput');
                const file = fileInput.files[0];
                
                if (!file) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', file);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                document.getElementById('batchLoading').style.display = 'block';
                document.getElementById('batchResult').innerHTML = '';
                
                try {
                    const response = await fetch('/api/predict/file', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const result = await response.json();
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    document.getElementById('batchLoading').style.display = 'none';
                    
                    if (result.success) {
                        // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        const csvContent = "data:text/csv;charset=utf-8," + 
                            "id,prediction\n" + 
                            result.data.map(row => `${row.id},${row.prediction}`).join('\n');
                        
                        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        const downloadLink = document.createElement('a');
                        downloadLink.href = encodeURI(csvContent);
                        downloadLink.download = 'predictions.csv';
                        downloadLink.className = 'btn';
                        downloadLink.textContent = 'üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã';
                        downloadLink.style.marginTop = '20px';
                        
                        document.getElementById('batchResult').innerHTML = `
                            <div class="result low-risk">
                                <h3>‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω</h3>
                                <p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: ${result.samples}</p>
                                <p>–ü—Ä–æ–≥–Ω–æ–∑—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é</p>
                            </div>
                        `;
                        
                        document.getElementById('batchResult').appendChild(downloadLink);
                    } else {
                        document.getElementById('batchResult').innerHTML = `
                            <div class="result high-risk">
                                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                                <p>${result.error}</p>
                            </div>
                        `;
                    }
                    
                } catch (error) {
                    document.getElementById('batchLoading').style.display = 'none';
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
                }
            }
            
            // Drag and drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
            const fileUpload = document.querySelector('.file-upload');
            
            fileUpload.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.style.borderColor = '#007bff';
            });
            
            fileUpload.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.style.borderColor = '#ddd';
            });
            
            fileUpload.addEventListener('drop', function(e) {
                e.preventDefault();
                this.style.borderColor = '#ddd';
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    document.getElementById('fileInput').files = files;
                }
            });
        </script>
    </body>
    </html>
    """
    return html_content

@app.get("/api/models")
async def get_model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    if predictor is None:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    return {
        "model_type": "random_forest",
        "threshold": predictor.threshold,
        "features_count": len(predictor.feature_names) if predictor.feature_names else 0,
        "categorical_features": predictor.categorical_features,
        "numerical_features": predictor.numerical_features
    }

@app.post("/api/predict/single")
async def predict_single(data: dict):
    """–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
    if predictor is None:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    try:
        result = predictor.predict_single(data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/predict/file")
async def predict_file(file: UploadFile = File(...)):
    """–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ñ–∞–π–ª–∞"""
    if predictor is None:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    try:
        if not file.filename.endswith('.csv'):
            raise HTTPException(status_code=400, detail="–¢–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_csv(file.file)
        
        if 'id' not in df.columns:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü 'id'")
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {file.filename}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        predictions = predictor.predict_batch(df)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_df = pd.DataFrame({
            'id': df['id'],
            'prediction': predictions
        })
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        return {
            "success": True,
            "samples": len(df),
            "predictions": predictions,
            "data": result_df.to_dict('records')
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))



if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 