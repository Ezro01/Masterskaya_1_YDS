import requests
import json
import pandas as pd
import tempfile
import os

def test_complete_interface():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    base_url = "http://localhost:8000"
    
    print("üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Heart Disease Prediction")
    print("=" * 70)
    
    try:
        # 1. –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        response = requests.get(f"{base_url}/")
        if response.status_code == 200:
            print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return False
        
        # 2. –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏...")
        response = requests.get(f"{base_url}/api/models")
        if response.status_code == 200:
            model_info = response.json()
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"üìä –ú–æ–¥–µ–ª—å: {model_info.get('model', 'unknown')}")
            if 'features_count' in model_info:
                print(f"üìã –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info['features_count']}")
            elif 'features' in model_info:
                print(f"üìã –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(model_info['features'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {response.status_code}")
            return False
        
        # 3. –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)...")
        low_risk_data = {
            'Age': 30,
            'Cholesterol': 180,
            'Diabetes': 0,
            'Family History': 0,
            'Obesity': 0,
            'Previous Heart Problems': 0,
            'Stress Level': 0,
            'Physical Activity Days Per Week': 5,
            'Gender': 0
        }
        
        response = requests.post(
            f"{base_url}/api/predict/single",
            json=low_risk_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['prediction']} ({'–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫' if result['prediction'] == 0 else '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫'})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.status_code}")
            return False
        
        # 4. –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)...")
        high_risk_data = {
            'Age': 70,
            'Cholesterol': 280,
            'Diabetes': 1,
            'Family History': 1,
            'Obesity': 1,
            'Previous Heart Problems': 1,
            'Stress Level': 2,
            'Physical Activity Days Per Week': 1,
            'Gender': 1
        }
        
        response = requests.post(
            f"{base_url}/api/predict/single",
            json=high_risk_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['prediction']} ({'–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫' if result['prediction'] == 0 else '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫'})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.status_code}")
            return False
        
        # 5. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
        test_data = pd.DataFrame({
            'id': [1, 2, 3, 4, 5],
            'Age': [45, 55, 65, 35, 75],
            'Cholesterol': [200, 220, 250, 180, 300],
            'Diabetes': [0, 1, 0, 0, 1],
            'Family History': [1, 0, 1, 0, 1],
            'Obesity': [0, 1, 0, 0, 1],
            'Previous Heart Problems': [0, 0, 1, 0, 1],
            'Stress Level': [1, 2, 1, 0, 2],
            'Physical Activity Days Per Week': [3, 2, 1, 5, 0],
            'Gender': [1, 0, 1, 0, 1]
        })
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as tmp_file:
            test_data.to_csv(tmp_file.name, index=False)
            tmp_filename = tmp_file.name
        
        try:
            with open(tmp_filename, 'rb') as f:
                files = {'file': ('test_data.csv', f, 'text/csv')}
                response = requests.post(f"{base_url}/api/predict/file", files=files)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {result['total_samples']}")
                
                # –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if result.get('predictions_file'):
                    download_response = requests.get(f"{base_url}/api/download/{result['predictions_file']}")
                    if download_response.status_code == 200:
                        print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        results_df = pd.read_csv(tmp_filename.replace('.csv', '_results.csv') if '_results.csv' in tmp_filename else tmp_filename)
                        if 'id' in results_df.columns and 'prediction' in results_df.columns:
                            print("‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_df['prediction'].tolist()}")
                        else:
                            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_response.status_code}")
                else:
                    print("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(tmp_filename):
                os.unlink(tmp_filename)
        
        print("\n" + "=" * 70)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("=" * 70)
        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
        print("üìã –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_complete_interface()
    
    if success:
        print("\n‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º") 